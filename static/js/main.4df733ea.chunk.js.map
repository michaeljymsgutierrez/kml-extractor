{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","useState","coordinates","setCoordinates","gKey","setGKey","useEffect","window","localStorage","getItem","className","id","href","type","onChange","e","data","kml","target","reader","FileReader","updatedCoordinates","files","readAsText","onload","result","match","replace","trim","split","forEach","coord","splitCoord","push","getKmlData","onClick","prompt","setItem","addGoogleKey","length","gUrl","formattedCoordinates","map","coordinate","closingCoordinates","join","mapUrl","open","alert","verifyCoordinates","key","colSpan","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4OAiIeA,G,MA9HH,SAACC,GAAW,IAAD,EACiBC,mBAAS,IAD1B,mBACdC,EADc,KACDC,EADC,OAEGF,mBAAS,IAFZ,mBAEdG,EAFc,KAERC,EAFQ,KA0ErB,OAPAC,qBAAU,WACR,IAAMF,EAAOG,OAAOC,aAAaC,QAAQ,QACrCL,GACFC,EAAQD,KAET,IAGD,yBAAKM,UAAU,OACb,0BAAMC,GAAG,gBACP,uBAAGC,KAAK,qEAAR,sBAIF,yBAAKF,UAAU,mBACb,2BAAOG,KAAK,OAAOC,SAAU,SAACC,GAAD,OA9EhB,SAACC,GAClB,IAAMC,EAAMD,EAAKE,OACXC,EAAS,IAAIC,WACbC,EAAqB,GAEvBJ,EAAIK,MAAM,KACZH,EAAOI,WAAWN,EAAIK,MAAM,IAC5BH,EAAOK,OAAS,WACSL,EAAOM,OAAOC,MACnC,wCAGmC,GAClCC,QAAQ,0BAA6B,IACrCC,OACAC,MAAM,MAEKC,SAAQ,SAACC,GACrB,IAAMC,EAAaD,EAAMF,MAAM,KAC3BG,EAAW,IAAMA,EAAW,IAC9BX,EAAmBY,KAAK,CAACD,EAAW,GAAIA,EAAW,QAIvD7B,EAAekB,KAsDqBa,CAAWnB,OAGjD,yBAAKL,UAAU,mBACb,4BAAQyB,QAAS,kBA3BF,WACnB,IAAM/B,EAAOgC,OAAO,qBAAsB,IACtChC,IACFC,EAAQD,GACRG,OAAOC,aAAa6B,QAAQ,OAAQjC,IAuBXkC,KAAvB,sBADF,iBAGE,4BAAQH,QAAS,kBAvDG,WACxB,GAAI/B,GAAQF,EAAYqC,OAAS,EAAG,CAClC,IAAMC,EAAI,2EAAuEpC,EAAvE,sBAEJqC,EAAuBvC,EAAYwC,KAAI,SAACC,GAC5C,MAAM,GAAN,OAAUA,EAAW,GAArB,YAA2BA,EAAW,OAGlCC,EAAqB1C,EAAY,GAAG2C,OAEpCC,EAAM,UAAMN,GAAN,OAAaC,EAAqBI,KAC5C,KADU,YAEPD,GAELrC,OAAOwC,KAAKD,EAAQ,eAEO,IAAvB5C,EAAYqC,OACdS,MAAM,6BACY,OAAT5C,GAA0B,KAATA,EAC1B4C,MAAM,gCAENA,MAAM,mBAkCiBC,KAAvB,uBAGF,yBAAKvC,UAAU,mBAAf,eACeN,GAAc,sBAG7B,yBAAKM,UAAU,qBACb,+BACE,+BACE,4BACE,wCACA,2CAGJ,+BACGR,EAAYwC,KAAI,SAACC,EAAYO,GAC5B,OACE,wBAAIA,IAAKA,GACP,4BAAKP,EAAW,IAChB,4BAAKA,EAAW,QAIE,IAAvBzC,EAAYqC,QACX,4BACE,wBAAIY,QAAQ,IAAIzC,UAAU,WAA1B,0BCzGI0C,QACW,cAA7B7C,OAAO8C,SAASC,UAEe,UAA7B/C,OAAO8C,SAASC,UAEhB/C,OAAO8C,SAASC,SAAS5B,MACvB,2DCZN6B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4df733ea.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nconst App = (props) => {\n  const [coordinates, setCoordinates] = useState([]);\n  const [gKey, setGKey] = useState(\"\");\n\n  const getKmlData = (data) => {\n    const kml = data.target;\n    const reader = new FileReader();\n    const updatedCoordinates = [];\n\n    if (kml.files[0]) {\n      reader.readAsText(kml.files[0]);\n      reader.onload = () => {\n        const kmlCoordinates = reader.result.match(\n          /(<coordinates).*(coordinates>)/gs\n        );\n\n        const trimmedCoords = kmlCoordinates[0]\n          .replace(/['<coordinates */> /\\n]/gs, \"\")\n          .trim()\n          .split(\",0\");\n\n        trimmedCoords.forEach((coord) => {\n          const splitCoord = coord.split(\",\");\n          if (splitCoord[1] && splitCoord[0]) {\n            updatedCoordinates.push([splitCoord[1], splitCoord[0]]);\n          }\n        });\n\n        setCoordinates(updatedCoordinates);\n      };\n    }\n  };\n\n  const verifyCoordinates = () => {\n    if (gKey && coordinates.length > 0) {\n      const gUrl = `https://maps.googleapis.com/maps/api/staticmap?size=1200x400&key=${gKey}&path=color:red%7C`;\n\n      const formattedCoordinates = coordinates.map((coordinate) => {\n        return `${coordinate[0]},${coordinate[1]}`;\n      });\n\n      const closingCoordinates = coordinates[0].join();\n\n      const mapUrl = `${gUrl}${formattedCoordinates.join(\n        \"|\"\n      )}|${closingCoordinates}`;\n\n      window.open(mapUrl, \"_blank\");\n    } else {\n      if (coordinates.length === 0) {\n        alert(\"Please Select KML file...\");\n      } else if (gKey === null || gKey === \"\") {\n        alert(\"Please Add Google API Key...\");\n      } else {\n        alert(\"Unknow error...\");\n      }\n    }\n  };\n\n  const addGoogleKey = () => {\n    const gKey = prompt(\"Add Google API Key\", \"\");\n    if (gKey) {\n      setGKey(gKey);\n      window.localStorage.setItem(\"gKey\", gKey);\n    }\n  };\n\n  useEffect(() => {\n    const gKey = window.localStorage.getItem(\"gKey\");\n    if (gKey) {\n      setGKey(gKey);\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <span id=\"forkongithub\">\n        <a href=\"https://github.com/michaeljymsgutierrez/kml-extractor-source-code\">\n          Fork me on GitHub\n        </a>\n      </span>\n      <div className=\"kml-file-picker\">\n        <input type=\"file\" onChange={(e) => getKmlData(e)} />\n      </div>\n\n      <div className=\"kml-file-picker\">\n        <button onClick={() => addGoogleKey()}>Add Google API Key</button>\n        &nbsp; &nbsp; &nbsp;\n        <button onClick={() => verifyCoordinates()}>Verify Coordinates</button>\n      </div>\n\n      <div className=\"kml-file-picker\">\n        GOOGLE KEY: {gKey ? gKey : \" -- NO API KEY -- \"}\n      </div>\n\n      <div className=\"coordinates-table\">\n        <table>\n          <thead>\n            <tr>\n              <th>LATITUDE</th>\n              <th>LONGITUDE</th>\n            </tr>\n          </thead>\n          <tbody>\n            {coordinates.map((coordinate, key) => {\n              return (\n                <tr key={key}>\n                  <td>{coordinate[0]}</td>\n                  <td>{coordinate[1]}</td>\n                </tr>\n              );\n            })}\n            {coordinates.length === 0 && (\n              <tr>\n                <td colSpan=\"2\" className=\"no-data\">\n                  NO DATA TO SHOW\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}